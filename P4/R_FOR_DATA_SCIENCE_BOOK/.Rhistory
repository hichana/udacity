) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(color = cancelled), binwidth = 1/4)
flights2 <- nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
)
flights2 <- nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
)
flights2
filter(nycflights13::flights, is.na(nycflights13::flights$dep_time))
filter(nycflights13::flights, is.na(flights$dep_time))
filter(nycflights13::flights, is.na(dep_time))
filter(nycflights13::flights, is.na(dep_time))
flights2 <- nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
)
flights2
ggplot(flights2, aes(sched_dep_time)) +
geom_freqpoly(aes(color = cancelled), binwidth = 1/4)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data data = mpg, mapping = aes(x = class, y = hwy)) +
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
ggplot(diamonds) +
geom_count(aes(x = cut, y = color))
diamonds %>%
count (color, cut)
diamonds %>%
count (color)
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
ggplot(mapping = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 0.5)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 0.01)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1 / 100)
install.packages("hexbin")
# install.packages("hexbin")
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE>
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = FALSE)
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting)) +
xlab("hello")
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting)) +
xlab("eruption time") + ylab("eruption lenght")
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting)) +
xlab("eruption time") + ylab("eruption length")
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(data = diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
as_tibble(iris)
tibble(
x = 1:5,
y = 1,
z = x ^ 2 + y
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb
tribble(
~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tb2 <- tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tb2
tb2 <- tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tb2
tb2 <- tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
print(tb2)
tb2 <- tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb
tribble(
~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
nycflights13::flights %>%
print(n = 10, width = Inf)
package?tibble
nycflights13::flights %>%
View()
df <- tibble(
x = runif(5),
y rnorm(5)
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df
?runif()
?rnorm()
?runif()
df <- tibble(
x = runif(5), #
y = rnorm(5),
z = dunif(5)# random gen from normal dist
)
df
df <- tibble(
x = runif(5), #
y = rnorm(5),
z = dunif(5, 1, 3)# random gen from normal dist
)
df
df <- tibble(
x = runif(5), #
y = rnorm(5),
z = dunif(5, min = 1, max = 5, log = FALSE)# random gen from normal dist
)
df
df <- tibble(
x = runif(5), #
y = rnorm(5),
z = dunif(5, min = 1, max = 1, log = FALSE)# random gen from normal dist
)
df
df <- tibble(
x = runif(5), #
y = rnorm(5),
z = dunif(5, min = 0, max = 1, log = FALSE)# random gen from normal dist
)
df
?runif()
df <- tibble(
x = runif(5, 1, 2), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df %>% .$x
df %>% .[["x"]]
class(as.data.frame(tb))
new_df <- as.data.frame(tb)
new_df
diamonds2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
as_tibble(iris)
tibble(
x = 1:5,
y = 1,
z = x ^ 2 + y
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb
tribble(
~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
nycflights13::flights %>%
print(n = 10, width = Inf)
options(tibble.print_max = 20, tibble.print_min = 5)
options(dplyr.print_min = Inf)
options(tibble.width = Inf)
package?tibble
nycflights13::flights %>%
View()
?runif()
?rnorm()
df <- tibble(
x = runif(5), # random deviates on uniform dist
y = rnorm(5) # random gen from normal dist
)
df
df %>% .$x
df %>% .[["x"]]
class(as.data.frame(tb))
new_df <- as.data.frame(tb)
new_df
diamonds2
ggplot(diamonds2, aes(x = depth, y = price)) +
geom_point()
ggplot(diamonds2, aes(x = cut, y = price)) +
geom_point()
ggplot(diamonds2, aes(x = cut, y = price)) +
geom_bar()
ggplot(diamonds2, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(diamonds2, mapping = aes(x = price, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = diamonds2, mapping = aes(x = price, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = diamonds2, mapping = aes(x = price, color = cut)) +
geom_freqpoly(binwidth = 100)
ggplot(data = diamonds2, mapping = aes(x = price, color = cut)) +
geom_freqpoly(binwidth = 1000)
heights <- read_csv("data/stroopdata.csv")
read_csv("a,b,c
1,2,3
4,5,6")
heights
?heights
heights
typeof(heights)
heights
heights
read_csv("The first line of metadata
The second line of metadata
x,y,z
1,2,3", skip = 2)
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = c("x", "y", "z"))
read_csv("1,2,3\n4,5,6", col_names = c("x", "y", "z"))
read_csv("a,b,c\n1,2,.", na = ".")
read_csv("a,b,c\n1,2,", na = ".")
read_csv("a,b,c\n1,2,.", na = ".")
read_csv("a,b,c\n1,2,.", na = "2")
read_csv("a,b,c\n1,2,.", na = ".")
diamonds2
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
str(parse_logical("TRUE", "FALSE", "NA"))
str(parse_logical(c("TRUE", "FALSE", "NA")))
?str()
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_date(c("2010-01-01", "1979-10-14")))
x <- parse_integer(c("123", "345", "abc", "123.45"))
x
problems(x)
parse_double("1.23")
parse_double("1.23")
parse_double("1.23", locale = locale(decimal_mark = ","))
parse_double("1.23")
parse_double("1,23", locale = locale(decimal_mark = ","))
parse_number("$100")
parse_number("20%")
parse_number("It costs $123.45")
# US
parse_number("$123,456,789")
# parts of EU
parse_number("123.456.788", locale = locale(grouping_mark = "."))
# Switzerland
parse_number("123'456'789", locale = local(grouping_mark = "'"))
# US
parse_number("$123,456,789")
# parts of EU
parse_number("123.456.788", locale = locale(grouping_mark = "."))
# Switzerland
parse_number("123'456'789", locale = locale(grouping_mark = "'"))
charToRaw("Hadley")
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananananan"), levels = fruit)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
print("hi")
print("helllooo" * 2)
